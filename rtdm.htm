<!--Copyright (c) 2013 Ryan Stemen

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.-->

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Robo Throw DM</title>
    <script type="text/javascript"><!--
        const WIDTH = 1280;
        const HEIGHT = 720;
        const TILE_SIZE = 24;
        
        var center = new vec2(WIDTH / 2, HEIGHT / 2);
        var context;
        var canvas;
        var bullets = new Array();
        var keyboardVec = new vec2(0, 0);
        var keyboardState = new Object();
        var mousePosition = new vec2(0,0);
        var mouseDown = false;
        var counter = 0.0;
        var killCount = 0;
        
        var actors = new Array();
        var player;
        var level;

        var defaultLevel =  "########################################\n" + 
                            "#......................................#\n" +
                            "#......................................#\n" +
                            "#......................................#\n" +
                            "#......................................#\n" +
                            "#......................................#\n" +
                            "#......................................#\n" +
                            "#......................................#\n" +
                            "#............################..........#\n" +
                            "#............#..............#..........#\n" +
                            "#............#..............#..........#\n" +
                            "#.......######........#.....#..........#\n" +
                            "#.....................##########.......#\n" +
                            "#....................................###\n" +
                            "#..................................#####\n" +
                            "#...........P....................#######\n" +
                            "#.............................##########\n" +
                            "########################################\n";
        
        window.onload = init;
        window.onmousemove = onMouseMove;
        window.onmousedown = onMouseDown;
        window.onmouseup = onMouseUp;
        window.onkeydown = onKeyDown;
        window.onkeyup = onKeyUp;
        
        
        function vec2($x, $y){
            this.x = ($x == null) ? 0 : $x;
            this.y = ($y == null) ? 0 : $y;
        }
        
        vec2.prototype.lengthSquared = function(){
            return this.x * this.x + this.y * this.y;
        }
        
        vec2.prototype.length = function(){
            return Math.sqrt(this.x * this.x + this.y * this.y);
        }
        
        vec2.prototype.normalize = function(){
            var length = this.length();
            if(length == 0){
                return new vec2(); 
            }
            return new vec2(this.x / length, this.y / length);
        }
        
        vec2.prototype.plus = function($vec2_2){
            return new vec2(this.x + $vec2_2.x, this.y + $vec2_2.y);
        }
        
        vec2.prototype.minus = function($vec2_2){
            return new vec2(this.x - $vec2_2.x, this.y - $vec2_2.y);
        }
        
        vec2.prototype.times = function($val){
            return new vec2(this.x * $val, this.y * $val);
        }
        
        vec2.prototype.divide = function($val){
            return new vec2(this.x / $val, this.y / $val);
        }
        
        vec2.prototype.dot = function($vec2){
            return this.x * $vec2.x + this.y * $vec2.y;
        }

        vec2.prototype.toWorldCoord = function(){
            return this;

            // var x1 = this.x - camera.frustrumWidth;// - camera.x;
            // var y1 = this.y - camera.frustrumHeight;// - camera.y;

            // var scaleRatio = camera.scaleRatio(this.z);
            // x1 = (x1 / scaleRatio) + camera.x;
            // y1 = (y1 / scaleRatio) + camera.y;
            // return new vec3(x1, y1, 0);
        }
            
         vec2.prototype.toScreenCoord = function(){
            return this;

            // var scaleRatio = camera.scaleRatio(this.z);
            
            // var deltaX = this.x - camera.x;
            // var deltaY = this.y - camera.y;
            // var x2 = camera.frustrumWidth + (deltaX * scaleRatio);
            // var y2 = camera.frustrumHeight + (deltaY * scaleRatio);
            // return new vec3(x2, y2, 0);
        }

        vec2.prototype.SRT = function(scale, rotation, translationX, translationY){
            var x = this.x * scale;
            var y = this.y * scale;
            var cos = Math.cos(rotation);
            var sin = Math.sin(rotation);
            var newX = cos * x - sin * y + translationX;
            var newY = sin * x + cos * y + translationY;
            return new vec2(newX, newY);
        }

        pm2.prototype = new vec2();
        pm2.prototype.constructor = pm2;
        function pm2($x, $y, $mass){
            pm2.call(this, $x, $y);
            this.mass = ($mass != null) ? $mass : 1.0;
        }

        function findIntersection($pt0, $pt1, $pt2, $pt3){
            var s1 = $pt1.minus($pt0);
            var s2 = $pt3.minus($pt2);

            var s = (-s1.y * ($pt0.x - $pt2.x) + s1.x * ($pt0.y - $pt2.y)) / (-s2.x * s1.y + s1.x * s2.y);
            var t = ( s2.x * ($pt0.y - $pt2.y) - s2.y * ($pt0.x - $pt2.x)) / (-s2.x * s1.y + s1.x * s2.y);

            if (s >= 0 && s <= 1 && t >= 0 && t <= 1)
            {
                var intersect = new vec2($pt0.x + (t * s1.x), $pt0.y + (t * s1.y));

                context.strokeStyle = "#0000FF";
                context.beginPath();
                context.moveTo($pt0.x, $pt0.y);
                context.lineTo($pt1.x, $pt1.y);
                context.stroke();

                context.strokeStyle = "#FF00FF";

                context.beginPath();
                context.moveTo($pt2.x, $pt2.y);
                context.lineTo($pt3.x, $pt3.y);
                context.stroke();

                context.beginPath();
                context.arc(intersect.x, intersect.y, 3, 0, Math.PI * 2);
                context.stroke();
                context.strokeStyle = "#000000";

                return intersect;
            }

            return null; // No collision
        }
        
        function sign(x) { return x ? x < 0 ? -1 : 1 : 0; }

        function Actor($x, $y, $velocity, $radius){
            this.pos = new vec2($x, $y);
            this.prevPos = new vec2($x, $y);
            this.radius = $radius;
            this.force = new vec2();
            this.velocity = ($velocity) ? $velocity : new vec2();
            this.heading = ($velocity) ? this.velocity.normalize() : new vec2(1, 0);
            this.alive = true;
            this.aliveFrames = 0;
            
            
            this.maxTurnRate = 0.1;
            this.maxSpeed = 7.5;
            
            this.smartFleePts = [];
        }
        
        Actor.prototype.getSteeringForce = function(){
            return new vec2(0, 0.1);    //only gravity by default
        }
        
        Actor.prototype.update = function(){
            ++this.aliveFrames;
            var oldPos = this.pos.plus(new vec2());
            var steeringForce = this.getSteeringForce();
            var accel = steeringForce;
            var implicitVelocity = this.pos.minus(this.prevPos).plus(accel);

            this.velocity = implicitVelocity;//this.velocity.plus(accel);//
            // var speed = this.velocity.length();
            //this.velocity = (speed == 0) ? new vec2() : this.velocity.divide(speed / Math.min(speed, this.maxSpeed));
            
            this.pos = this.pos.plus(this.velocity);
            
            this.heading = this.velocity.normalize();

            this.prevPos = oldPos;

            this.checkLevelCollisions(level);
        }

        Actor.prototype.checkLevelCollisions = function($lvl){
            var tx = parseInt(this.pos.x / TILE_SIZE);
            var ty = parseInt(this.pos.y / TILE_SIZE);
            // var tIndex = ty * $lvl.width + tx;
            // if(tIndex >= $lvl.tiles.length || tx < 0 || ty < 0 || tx >= $lvl.width || ty >= $lvl.height)
            //     return;
            // var tile = $lvl.tiles[tIndex];
            // if(tile == null)
            //     return;
            // this.handleTileCollision(tile);

            //  var ntx = tx + sign(this.velocity.x);
            // if(ntx != tx && ntx >= 0 && ntx < $lvl.width)
            //     this.handleTileCollision($lvl.tiles[ty * $lvl.width + ntx])

            // var nty = ty + sign(this.velocity.y);
            // if(nty != ty && nty >= 0 && nty < $lvl.height)
            //     this.handleTileCollision($lvl.tiles[nty * $lvl.width + tx]);

            for(var y = -1; y <= 1; y++){
                for(var x = -1; x <= 1; x++){
                    var ntx = tx - x;
                    var nty = ty - y;
                    if(ntx >= 0 && ntx < $lvl.width && nty >= 0 && nty < $lvl.height)
                        this.handleTileCollision($lvl.tiles[nty * $lvl.width + ntx]);
                }
            }

           
        }

        Actor.prototype.handleTileCollision = function($tile){
            switch($tile.type){
                case "#":
                    var closePt = $tile.getClosestPt(this.pos);
                    var delta = this.pos.minus(closePt);
                    var deltaLength = delta.length();
                    if(deltaLength < this.radius){
                        context.beginPath();
                        context.arc(closePt.x, closePt.y, 3, 0, Math.PI * 2);
                        context.stroke();
                        context.fillStyle = "#F00";
                        context.fill();
                        var normVelocity = this.velocity.normalize();

                        var errorAmount = (this.radius - deltaLength);// * normVelocity.dot(delta.normalize());
                        if(delta.dot(closePt.minus($tile.center)) < 0)
                            delta = delta.times(-1);
                        this.pos = this.pos.plus(delta.times(errorAmount / deltaLength));
                        // this.pos = this.pos.minus(normVelocity.times(errorAmount));
                    } 
                    break;
            }
            
        }
        
        Actor.prototype.seek = function($target){
            var desiredVelocity = $target.minus(this.pos).normalize().times(this.maxSpeed);
            return desiredVelocity.minus(this.velocity);
        }
        
        Actor.prototype.flee = function($actors){
            var count = $actors.length;
            var desiredVelocity = new vec2(0, 0);
            for(var i = 0; i < count; i++){
                var a = $actors[i];
                if(a == this)
                    continue;
                var delta = this.pos.minus(a.pos);
                var dist = delta.lengthSquared();
                if(dist > 10000)
                    continue;
                desiredVelocity = desiredVelocity.plus( delta.divide(dist));
            }
            desiredVelocity = desiredVelocity.normalize().times(this.maxSpeed);
            return desiredVelocity.minus(this.velocity);
        }
        
        Actor.prototype.smartFlee = function($actors){
            this.smartFleePts = new Array();
            
            var count = $actors.length;
            var desiredVelocity = new vec2(0, 0);
            for(var i = 0; i < count; i++){
                var a = $actors[i];
                if(a == this)
                    continue;
                var delta = this.pos.minus(a.pos);
                
                //if the thing we are fleeing from isn't facing us then ignore it.
                if(a.heading.dot(delta.normalize()) < 0)
                    continue;
                
                //ignore it if it is too far away.
                var dist = delta.length();
                if(dist > 100)
                    continue;
                
                //flee in the object by sidestepping rather than running straight away
                var projectedPt = a.heading.times(a.heading.dot(delta)).plus(a.pos);
                delta = this.pos.minus(projectedPt);
                
                desiredVelocity = desiredVelocity.plus(delta.normalize().divide(dist));
            }
            desiredVelocity = desiredVelocity.normalize().times(this.maxSpeed);
            return desiredVelocity.minus(this.velocity);
        }
        
        Actor.prototype.draw = function(){
            context.beginPath();
            context.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI*2, true);
            context.stroke();

            context.beginPath();
            context.arc(this.prevPos.x, this.prevPos.y, this.radius - 2, 0, Math.PI*2, true);
            context.stroke();

            context.beginPath();
            context.moveTo(this.pos.x, this.pos.y);
            var end = this.pos.plus(this.velocity.times(15));
            context.lineTo(end.x, end.y);
            context.stroke();
        }
        
        AxisAlignedActor.prototype = new Actor();
        AxisAlignedActor.prototype.constructor = AxisAlignedActor;
        function AxisAlignedActor($x, $y, $velocity, $size){
            Actor.call(this, $x, $y, $velocity, $size);

            this.shape = [  new vec2(-1, -1),
                            new vec2( 1, -1),
                            new vec2( 1,  1),
                            new vec2(-1,  1)];
            this.extents = new vec2($size, $size);
            for(var i = 0; i < this.shape.length; i++){
                this.shape[i] = this.shape[i].SRT($size, 0, 0, 0);
            }
        }

        AxisAlignedActor.prototype.checkLevelCollisions = function($lvl){
            var minTime = 1.0;
            var handleSweep = null;
            var t = null;
            for(var i = 0; i < this.shape.length; i++){
                var pt = this.pos.plus(this.shape[i]);
                var tx = parseInt(pt.x / TILE_SIZE);
                var ty = parseInt(pt.y / TILE_SIZE);
                if(tx >= 0 && tx < $lvl.width && ty >= 0 && ty < $lvl.height){
                    var tile = $lvl.tiles[ty * $lvl.width + tx];
                    // if(tile.type == "#"){
                    //     sweep = this.AABBSweep(tile);
                    //     if(minTime > sweep.u0 && sweep.collision){
                    //         handleSweep = sweep;
                    //         t = tile;
                    //     }
                    // }
                    this.handleTileCollision(tile, pt);
                }
            }
            // if(handleSweep)
            //     this.handleTileCollision(t, this.pos, handleSweep);
        }

        AxisAlignedActor.prototype.handleTileCollision = function($tile, $pt, $sweepResult){
            switch($tile.type){
                case "#":                        
                    // if(!$tile.isPointInside($pt))
                    //    return;

                    var result = this.AABBSweep($tile); //$sweepResult;//
                    if(result.collision){// && (result.u0 != 0 && result.u1 != 0)){
                        var hitTime = (result.u0);
                        var offset = (this.pos.minus(this.prevPos)).times(hitTime);//this.velocity.times(hitTime);
                        this.pos = this.prevPos.plus(offset);// this.pos.minus(offset); //

                        var overlap = this.pos.minus($tile.center);//this.getTileOverlap($tile);
                        overlap = new vec2(Math.abs(overlap.x), Math.abs(overlap.y));

                        if(overlap.x > overlap.y){
                            this.velocity.x *= 0;
                        } else {
                            this.velocity.y *= 0;
                        }
                        this.pos = this.pos.plus(this.velocity.times(1.0 - result.u0));

                    }

                    // var overlap = this.getTileOverlap($tile);
                    // var delta = this.pos.minus($tile.pos);
                    // if(overlap == null)
                    //     return;
                    // if(overlap.x < overlap.y){
                    //     this.pos.x += overlap.x * sign(delta.x);
                    // } else {
                    //     this.pos.y += overlap.y * sign(delta.y);
                    // }

                    // for(var j = 0; j < 4; j++){
                    //     if((j == TOP && this.velocity.y < 0) || (j == RIGHT && this.velocity.x > 0) 
                    //         || (j == BOTTOM && this.velocity.y > 0) || (j == LEFT && this.velocity.x < 0))
                    //         continue;

                    //     var edge = $tile.getEdge(j);
                    //     var closePt = findIntersection($pt, $pt.minus(this.velocity), edge.v1, edge.v2);
                    //     if(closePt){
                    //         var ev = edge.v2.minus(closePt);
                    //         var evn = ev.normalize();
                    //         var ratio = $pt.minus(closePt).dot(evn);
                    //         var closePt2 = closePt.plus(evn.times(ratio));
                    //         // var closePt2 = $tile.closestPointOnEdge($pt, edge, this.velocity);

                    //         var delta = $pt.minus(closePt2).times(1.01);
                    //         this.pos = this.pos.minus(delta);
                    //         this.velocity = this.pos.minus(this.prevPos);
                    //         $pt = $pt.minus(delta);
                    //     } else {
                    //         // closePt = $tile.closestPointOnEdges($pt, this.velocity);
                    //         // var delta = $pt.minus(closePt).times(1.01);
                    //         // this.pos = this.pos.minus(delta);
                    //         // this.velocity = this.pos.minus(this.prevPos);
                    //         // $pt = $pt.minus(delta);
                    //     }
                    // }
                    break;
            }
        }

        function AxisAlignedBoundingBox($pos, $extents){
            this.pos = $pos;
            this.extents = $extents;
        };

        //returns true if this is overlapping b
        AxisAlignedBoundingBox.prototype.overlaps = function(b) {
            var T = b.pos.minus(this.pos);//vector from A to B
            return     Math.abs(T.x) <= (this.extents.x + b.extents.x) 
                    && Math.abs(T.y) <= (this.extents.y + b.extents.y);
        }

        //NOTE: since the vector indexing operator is not const,
        //we must cast away the const of the this pointer in the
        //following min() and max() functions
        //min x, y, or z
        AxisAlignedBoundingBox.prototype.min = function(i) {
            i = (i == 0) ? "x" : "y";
            return this.pos[i] - this.extents[i];
        }

        AxisAlignedBoundingBox.prototype.max = function(i) {
            i = (i == 0) ? "x" : "y";
            return this.pos[i] + this.extents[i];
        }

        AxisAlignedActor.prototype.AABBSweep = function($b){
            var A = new AxisAlignedBoundingBox( this.prevPos, this.extents );//previous state of AABB A
            var B = new AxisAlignedBoundingBox( $b.center, $b.extents );//previous state of AABB B
            var va = this.pos.minus(this.prevPos);//displacement of A
            var vb = $b.center.minus($b.prevPos);//displacement of B
            //the problem is solved in A's frame of reference

            var v = vb.minus(va);
            //relative velocity (in normalized time)

            var u_0 = new vec2(0, 0);
            //first times of overlap along each axis

            var u_1 = new vec2(1, 1);
            //last times of overlap along each axis

            //check if they were overlapping 
            // on the previous frame
            if( A.overlaps(B) ){
                u0 = u1 = 0;

                console.log("overlapping the previous frame.");
                var response = {
                    collision: u0 <= u1,
                    u0: 0,
                    u1: 0,
                };
                return response;
            }

            //find the possible first and last times
            //of overlap along each axis
            for( var i = 0; i < 2; i++ ) {
                var j = (i == 0) ? "x" : "y";
                if( A.max(i) < B.min(i) && v[j] < 0 ) {
                    u_0[j] = (A.max(i) - B.min(i)) / v[j];
                } else if( B.max(i) < A.min(i) && v[j] > 0 ) {
                    u_0[j] = (A.min(i) - B.max(i)) / v[j];
                }

                if( B.max(i) > A.min(i) && v[j] < 0 ) {
                    u_1[j] = (A.min(i) - B.max(i)) / v[j];
                } else if( A.max(i) > B.min(i) && v[j] > 0 ) {
                    u_1[j] = (A.max(i) - B.min(i)) / v[j];
                }
            }

            //possible first time of overlap
            u0 = Math.max( u_0.x, u_0.y);

            //possible last time of overlap
            u1 = Math.min( u_1.x, u_1.y);

            if(u0 < 0 || u0 > 1)// || u1 < 0 || u1 > 1)
                console.log("u0: " + u0 + "\t\tu1: " + u1);

            //they could have only collided if the first time of 
            //overlap occurred before the last time of overlap
            var response = {
                collision: u0 <= u1,
                u0: u0,
                u1: u1,
            };
            return response;
        }

        AxisAlignedActor.prototype.getTileOverlap = function($tile){
            var xOverlap = 0.0, yOverlap = 0.0;

            var tMinX = this.pos.x + this.shape[0].x;
            var tMaxX = this.pos.x + this.shape[1].x;
            var sx = 0;
            /* test the X direction */
            if(tMaxX < $tile.pos.x || ($tile.pos.x + TILE_SIZE) < tMinX) {
                return null;
            } 
            // get center X's of this and other box
            var thisCenterX = (tMinX + tMaxX) / 2.0;
            var otherCenterX = $tile.center.x;

            if(thisCenterX < otherCenterX) {
                xOverlap = tMaxX - $tile.pos.x;
            } else {
                xOverlap = ($tile.pos.x + TILE_SIZE) - tMinX;
            }
            sx = Math.max($tile.pos.x, tMinX);

            /* test the Y direction */
            var tMinY = this.pos.y + this.shape[1].y;
            var tMaxY = this.pos.y + this.shape[2].y;
            var sy = 0;
            /* test the X direction */
            if(tMaxY < $tile.pos.y || ($tile.pos.y + TILE_SIZE) < tMinY) {
                return null;
            } 
            // get center Y's of this and other box
            var thisCenterY = (tMinY + tMaxY) / 2.0;
            var otherCenterY = $tile.center.y;

            if(thisCenterY < otherCenterY) {
                yOverlap = tMaxY - $tile.pos.y;
            } else {
                yOverlap = ($tile.pos.y + TILE_SIZE) - tMinY;
            }
            sy = Math.max($tile.pos.y, tMinY);

            context.fillStyle = "#FFFF00";
            context.beginPath();
            context.fillRect(sx, sy, xOverlap, yOverlap);
            context.fillStyle = "#000000";


            return new vec2(xOverlap, yOverlap);

        }

        AxisAlignedActor.prototype.draw = function(){
            context.strokeStyle = "#00CCCC";
            context.fillStyle = this.color;
            
            if(this.shape != null){
                this.drawPoly();
                return;
            }
        }

        AxisAlignedActor.prototype.drawPoly = function(){
            context.beginPath();
            for(var i = 0; i < this.shape.length; i++)
            {
                var pt = this.shape[i].plus(this.pos).toScreenCoord();
                if(i == 0)
                    context.moveTo(pt.x, pt.y);
                else
                    context.lineTo(pt.x, pt.y);
            }
            context.fill();
            context.closePath();
            context.stroke();
        }

        
        Player.prototype = new AxisAlignedActor();
        Player.prototype.constructor = Player;
        function Player($x, $y){
            AxisAlignedActor.call(this, $x, $y, new vec2(1, 0), 10);
            this.maxSpeed = 0.35;
        }

        Player.prototype.getSteeringForce = function(){
            var totalForce = keyboardVec;
            if(this.shotForce)
                totalForce = totalForce.plus(this.shotForce);
            return Actor.prototype.getSteeringForce.call().plus(totalForce);
        }
        
        Player.prototype.update = function(){
            Actor.prototype.update.call(this);
        }
        
        
        Bullet.prototype = new AxisAlignedActor();
        Bullet.prototype.constructor = Bullet;
        function Bullet($x, $y, $velocity){
            AxisAlignedActor.call(this, $x, $y, $velocity, 3);
            this.prevPos = this.pos.minus($velocity);
            this.stoppedFrames = 0;
        }
        
        Bullet.prototype.isOffScreen = function(){
            // if any of these conditionals are true then the bullet can't be seen.
            return (this.pos.x + this.radius < 0)
               || (this.pos.x - this.radius > WIDTH)
               || (this.pos.y + this.radius < 0)
               || (this.pos.y - this.radius > HEIGHT);
        }
        
        Bullet.prototype.update = function(){
            Actor.prototype.update.call(this);
            
            this.checkHits(actors);

            if(this.velocity.lengthSquared() < 0.15){
                this.stoppedFrames++;
                if(this.stoppedFrames > 100){
                    var index = bullets.indexOf(this);
                    bullets.splice(index, 1);
                }
            } else {
                this.stoppedFrames = 0;
            }
        }
        
        Bullet.prototype.checkHits = function($actors){
            for(var i = 0; i < $actors.length; i++){
                var a = $actors[i];
                var dist = (a.radius + this.radius) * (a.radius + this.radius);
                if(this.pos.minus(a.pos).lengthSquared() < dist){
                    $actors.splice(i,1);
                    --i;
                    killCount++;
                }
            }
        }

        const TOP = 0;
        const RIGHT = 1;
        const BOTTOM = 2;
        const LEFT = 3;
        function Edge($v1, $v2){
            this.v1 = $v1;
            this.v2 = $v2;
        }

        function Tile($x, $y, $type){
            this.x = $x; 
            this.y = $y;
            this.pos = new vec2($x * TILE_SIZE, $y * TILE_SIZE);
            this.center = this.pos.plus(new vec2(TILE_SIZE * 0.5, TILE_SIZE * 0.5));
            this.type = $type;

            this.extents = new vec2(TILE_SIZE * 0.5 , TILE_SIZE * 0.5);
            this.prevPos = new vec2(this.center.x, this.center.y);
        }

        Tile.prototype.isPointInside = function(pt){
            var b1 = pt.x >= this.pos.x;
            var b2 = pt.x <= (this.pos.x + TILE_SIZE);
            var b3 = pt.y >= this.pos.y;
            var b4 = pt.y <= (this.pos.y + TILE_SIZE);
            return (b1 && b2 && b3 && b4);
        }

        Tile.prototype.closestPointOnEdge = function(refPt, edge){
            var v1 = edge.v1;
            var v2 = edge.v2
            var v1ToRef = refPt.minus(v1);//refPt.minus(this.pos).minus(v1);
            var edge = v2.minus(v1);
            var normEdge = edge.normalize();

            var dot = normEdge.dot(v1ToRef);
            var projectedPt = normEdge.times(dot);

            context.strokeStyle = "#00FF00";
            context.lineWidth = 3;
            context.moveTo(v1.x, v1.y);
            context.lineTo(v2.x, v2.y);
            context.stroke();
            context.lineWidth = 1;
            context.strokeStyle = "#000000";

            var tmpPt;
            if(dot < 0){
                tmpPt = v1;//this.pos.plus(v1);
            } else if(projectedPt.length() > edge.length()) {
                tmpPt = v2;//this.pos.plus(v2);
            } else {
                tmpPt = v1.plus(projectedPt);//this.pos.plus(v1).plus(projectedPt);
            }
            return tmpPt;
        }

        Tile.prototype.closestPointOnEdges = function(refPt, velocity){
            var minDist = 100000; 
            var closestPt;
            for(var i = 0; i < 4; i++){
                var edge = this.getEdge(i);
                var v1 = edge.v1;
                var v2 = edge.v2
                var v1ToRef = refPt.minus(v1);//refPt.minus(this.pos).minus(v1);
                var edge = v2.minus(v1);
                var normEdge = edge.normalize();

                var dot = normEdge.dot(v1ToRef);
                var projectedPt = normEdge.times(dot);

                context.strokeStyle = "#00FF00";
                context.lineWidth = 3;
                context.moveTo(v1.x, v1.y);
                context.lineTo(v2.x, v2.y);
                context.stroke();
                context.lineWidth = 1;
                context.strokeStyle = "#000000";

                var tmpPt;
                if(dot < 0){
                    tmpPt = v1;//this.pos.plus(v1);
                } else if(projectedPt.length() > edge.length()) {
                    tmpPt = v2;//this.pos.plus(v2);
                } else {
                    tmpPt = v1.plus(projectedPt);//this.pos.plus(v1).plus(projectedPt);
                }

                var tmpDist = tmpPt.minus(refPt).length();
                if(tmpDist < minDist){
                    closestPt = tmpPt;
                    minDist = tmpDist;
                }
            }
            return closestPt;
        }

        Tile.prototype.getClosestEdge = function($pt){
            var delta = $pt.minus(this.center);
            if(Math.abs(Math.abs(delta.x) - TILE_SIZE * 0.5) < Math.abs(Math.abs(delta.y) - TILE_SIZE * 0.5)){
                if(delta.x < 0){
                    return this.getEdge(LEFT);
                } else {
                    return this.getEdge(RIGHT);
                }
            } else {
                if(delta.y > 0){
                    return this.getEdge(BOTTOM);
                } else {
                    return this.getEdge(TOP);
                }
            }
        }

        Tile.prototype.getClosestPt = function($pt, $velocity){
            this.closestPointOnEdges($pt, $velocity);
            // var delta = $pt.minus(this.center);
            // if(Math.abs(delta.x) > Math.abs(delta.y)){
            //     if(delta.x < 0){
            //         return this.closestPointOnEdge($pt, this.getEdge(LEFT), $velocity);
            //     } else {
            //         return this.closestPointOnEdge($pt, this.getEdge(RIGHT), $velocity);
            //     }
            // } else {
            //     if(delta.y > 0){
            //         return this.closestPointOnEdge($pt, this.getEdge(BOTTOM), $velocity);
            //     } else {
            //         return this.closestPointOnEdge($pt, this.getEdge(TOP), $velocity);
            //     }
            // }
        }

        Tile.prototype.getEdge = function($index){
            switch($index){
                case TOP:
                    return new Edge(this.pos, this.pos.plus(new vec2(TILE_SIZE, 0)));
                case RIGHT:
                    return new Edge(this.pos.plus(new vec2(TILE_SIZE, 0)), this.pos.plus(new vec2(TILE_SIZE, TILE_SIZE)));
                case BOTTOM:
                    return new Edge(this.pos.plus(new vec2(TILE_SIZE, TILE_SIZE)), this.pos.plus(new vec2(0, TILE_SIZE)));
                case LEFT:
                    return new Edge(this.pos.plus(new vec2(0, TILE_SIZE)), this.pos); 
            }
        }

        function Level($levelData){
            this.tiles = [];
            var rows = $levelData.split("\n");
            var rowStride = rows[0].length;
            for(var i = 0; i < rows.length; i++){
                var row = rows[i];
                for(var j = 0; j < rowStride; j++){
                    var tileType = row[j];
                    this.tiles.push(new Tile(j, i, tileType));
                }
            }

            this.width = rowStride;
            this.height = rows.length;
        }

        Level.prototype.draw = function(){
            for(var i = 0; i < this.tiles.length; i++){
                var tile = this.tiles[i];
                switch(tile.type){
                    case "#":
                        context.beginPath();
                        context.strokeRect(tile.pos.x, tile.pos.y, TILE_SIZE, TILE_SIZE);
                        break;
                }
            }
        }

        Level.prototype.getPlayerSpawn = function(){
            for(var i = 0; i < this.tiles.length; i++){
                var tile = this.tiles[i];
                if(tile.type == "P"){
                    return new vec2(tile.pos.x + (TILE_SIZE * 0.5), tile.pos.y + (TILE_SIZE * 0.5));
                }
            }
        }
        
        function init(){            
            canvas = document.getElementById('c');
            context = canvas.getContext('2d');

            level = new Level(defaultLevel);
            
            var playerLoc = level.getPlayerSpawn();
            player = new Player(playerLoc.x, playerLoc.y);//(center.x, center.y);
            
            var loc = new vec2(0, 0);
            // for(var i = 0; i < 10; i++){
            //     spawnActor();
            // }
            
            runLoop();
        }
        
        function spawnActor(){
            var loc = new vec2(0, 0);
            do{
                loc.x = Math.random() * WIDTH;
                loc.y = Math.random() * HEIGHT;
            }while(loc.minus(player.pos).lengthSquared() < 30000)
            
            actors.push(new EnemyA(loc.x, loc.y));
        }
        
        function onMouseMove(event){
            mousePosition.x = event.pageX;
            mousePosition.y = event.pageY;
        }
        
        function onMouseDown(event){
            mouseDown = true;
        }
        
        function onMouseUp(event){
            mouseDown = false;
        }
        
        function onKeyDown(event){
            var key = String.fromCharCode(event.which).toUpperCase();
            keyboardState[key] = true;
            updateKeyboardVec();
        }
        
        function onKeyUp(event){
            var key = String.fromCharCode(event.which).toUpperCase();
            keyboardState[key] = false;
            updateKeyboardVec();
        }
        
        function updateKeyboardVec(){
            keyboardVec = new vec2(0, 0);
            if(keyboardState['W']){
                // keyboardVec.y -= 1;
            }    
            if(keyboardState['A']){
                keyboardVec.x -= 1;
            }
            if(keyboardState['S']){
                // keyboardVec.y += 1;
            }
            if(keyboardState['D']){
                keyboardVec.x += 1;
            }
            if(keyboardState[' ']){
                // player.prevPos = player.prevPos.minus(new vec2(0, -6));
                keyboardVec.y -= 1;
            }
                
            if(keyboardVec.lengthSquared() > 0){
                keyboardVec = keyboardVec.times(0.11);
            }
        }
        
        function runLoop(){
            //remove everything that we drew out previous frame from the screen
            context.clearRect(0, 0, WIDTH, HEIGHT);
            if(mouseDown && counter % 10 == 0){
                var mouseDelta = mousePosition.minus(player.pos);
                var bulletVelocity = mouseDelta.normalize().times(20).plus(keyboardVec);
                
                var bullet = new Bullet(player.pos.x, player.pos.y, bulletVelocity);            
                bullets.push(bullet);

                player.shotForce = mouseDelta.times(-0.01);
            } else {
                player.shotForce = new vec2();
            }

            for(var i = 0; i < bullets.length; i++){
                var b = bullets[i];
                b.update();
                
                if(b.isOffScreen())
                    bullets.splice(i, 1);
                
                b.draw();
            }
            
            for(var i = 0; i < actors.length; i++){
                var a = actors[i];
                a.update();
                a.draw();
            }

            level.draw();
            
            //draw the player
            player.update();
            player.draw();
            
            // increment the counter and call the runLoop function after a 14 ms delay
            counter += 1;
            if(player.alive)
                window.setTimeout(runLoop, 15);
        }
        
        
    </script>
</head>
<body>
    <canvas id="c" width="1280px" height="720px">Canvas not supported!</canvas>
</body>
</html>
